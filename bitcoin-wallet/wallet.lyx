#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass beamer
\begin_preamble
%\usetheme{Warsaw}
\usetheme{Boadilla}
% or ...

\usecolortheme{orchid}
\setbeamertemplate{footline}[text line]{} % makes the footer EMPTY

\setbeamercovered{transparent}
% or whatever (possibly just delete it)
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman times
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 2
\use_package amssymb 2
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Bitcoin Wallet
\end_layout

\begin_layout Separator

\end_layout

\begin_layout Frame

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status collapsed

\begin_layout Plain Layout
Simplest Wallet: Set of keypairs
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Collection of (public key, private key) pairs.
\end_layout

\begin_layout Itemize
Anyone with BTC and one of your public keys can set aside money for you,
 creating transaction output, which you can spend in future transactions
 signed by your private key.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status collapsed

\begin_layout Plain Layout
Bitcoin Transactions
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename tx.eps
	lyxscale 75
	scale 75

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status collapsed

\begin_layout Plain Layout
scriptPubkey ≈ public key + conditions
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
scriptPubKey is script determine conditions txout can be spent: what signatures
 and other data needs to be provided
\end_layout

\begin_layout Itemize
Standard scriptPubKey allows txout to be spent given valid signature from
 public key with specified hash.
\end_layout

\begin_layout Itemize
Can have other conditions: multisig, hash preimage 
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status collapsed

\begin_layout Plain Layout
Address = scriptPubKey + metadata
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
No generic address format, not possible to write an address for every scriptPubK
ey, only standard scriptPubKeys.
\end_layout

\begin_layout Itemize
Base58, Bech32 formats encode other metadata, too: mainnet/testnet bits,
 checksums.
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status collapsed

\begin_layout Plain Layout
Keypairs ↔ Scripts ↔ Addresses 
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
How many...
 (0/1/2/3+/∞) 
\end_layout

\begin_layout Itemize
...different address strings can be used to represent a given scriptPubKey?
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<2->
\end_layout

\end_inset

0 if nonstandard or 2 if standard (different addresses mainnet testnet)
\end_layout

\end_deeper
\begin_layout Itemize
...different scriptPubKeys may be used to send to funds to a given address?
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<3->
\end_layout

\end_inset

1
\end_layout

\end_deeper
\begin_layout Itemize
...different scriptPubKeys may be redeemable with a given keypair
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<4->
\end_layout

\end_inset

∞ nonstandard scriptPubKeys, plus many standard ones (P2PK, P2PKH, P2WPKH,
 variants embedded in P2SH, variants compressed / uncompressed)
\end_layout

\end_deeper
\begin_layout Itemize
...keypairs can be used to redeem a scriptPubKey
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<5->
\end_layout

\end_inset

1 for normal scriptPubKey, any number for weird pub keys (multisig, etc)
\end_layout

\end_deeper
\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status collapsed

\begin_layout Plain Layout
Complications
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Keypools
\end_layout

\begin_layout Itemize
HD keys
\end_layout

\begin_layout Itemize
Watch only keys
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\begin_layout Frame
\begin_inset Argument 4
status collapsed

\begin_layout Plain Layout
Schema
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
ddd
\end_layout

\end_deeper
\begin_layout Separator

\end_layout

\end_body
\end_document
