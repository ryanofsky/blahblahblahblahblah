- Simplest wallet is collection of keypairs
  - If share public key, miner or someone who already owns btc can create a txout with value that signature from private key can unlock
- Txout diagram
- scriptPubkey ≈ public key
  - scriptPubKey is script determine conditions txout can be spent
  - Standard scriptPubKey will say txout can be spent given valid signature from some public key with specified hash
  - Can have other conditions, e.g. multisig, hash preimage
- Address = scriptPubKey + metadata
  - No generic address format. Base58, Bech32 only able to standard scriptPubKey formats.
  - Addresses add other metadata like mainnet/testnet bit, checksum
- Keypairs <-> scripts <-> addresses

  How many... (0/1/2/3+/∞)

  - ...possible address strings can be used to represent a scriptPubKey?
    - 0 if nonstandard or 2 if standard (different addresses mainnet testnet)
  - ...possible scriptPubKeys are represented by an address?
    - 1
  - ...possible scriptPubKeys redeemable with a keypair
    - ∞ nonstandard scriptPubKeys, plus many standard ones (P2PK, P2PKH, P2WPKH, variants embedded in P2SH, variants compressed / uncompressed)
  - ...keypairs that can redeem a scriptPubKey
    - 1 for normal scriptPubKey, any number for weird pub keys (multisig, etc)

- Wallet schema
  - Address
    - address (base58/bech32 string, primary key)
    - name / label (string)
    - purpose (string)
  - Transaction
    - hash (primary key)
    - serialized CTransaction
    - block hash
    - position in block
    - comment & to strings, spent bool

  - watch-only scriptPubKeys
    - CScript

  - key
    - key -> metadata

  -


  - Address


One/multiple keypair referenced by single scriptpubkey. Mulirisig
One/multiple scrippubkey spendable by keypair. P2kre, compressed key, hash compressed hash, script hash, segwot

Set of keypair complications

Watch only, wallet knows only pub not private
Hardened hd deyerministaclly generate keys instead of randomly.
Unhardened. Determinystacally Generate public keys without knowing private keys.
